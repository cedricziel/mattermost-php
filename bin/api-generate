#!/usr/bin/env php
<?php

use CedricZiel\MattermostPhp\Client\ResponseTrait;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\Method;
use Nette\PhpGenerator\PhpNamespace;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\StreamFactoryInterface;

if (!is_file(dirname(__DIR__).'/vendor/autoload.php')) {
    throw new LogicException('Symfony Runtime is missing. Try running "composer require symfony/runtime".');
}

require_once dirname(__DIR__).'/vendor/autoload.php';

function prepareEndpointName(string $tag): string
{
    return str_replace(' ', '', ucwords(str_replace('-', ' ', $tag))) . 'Endpoint';
}

function findClass(PhpNamespace $namespace, string $tag): ?ClassType
{
    foreach ($namespace->getClasses() as $class) {
        if ($class->getName() === prepareEndpointName($tag)) {
            return $class;
        }
    }

    return null;
}

$ymlSrc = file_get_contents(__DIR__ . '/../resources/openapi.json');
$openApi = json_decode($ymlSrc, true);

$printer = new Nette\PhpGenerator\PsrPrinter;

$endpointNamespaceName = 'CedricZiel\MattermostPhp\Client\Endpoint';
$modelNamespaceName = 'CedricZiel\MattermostPhp\Client\Model';
$endpointNamespace = new PhpNamespace($endpointNamespaceName);
$modelNamespace = new PhpNamespace($modelNamespaceName);

@mkdir(__DIR__ . '/../src/Client/Endpoint');
@mkdir(__DIR__ . '/../src/Client/Model');

foreach ($openApi['x-tagGroups'] as $tagGroup) {
    if ($tagGroup['name'] !== 'Endpoints') {
        continue;
    }

    foreach ($tagGroup['tags'] as $tag) {
        $class = $endpointNamespace->addClass(prepareEndpointName($tag));
        $class->addTrait(\CedricZiel\MattermostPhp\Client\HttpClientTrait::class);
        $constructor = $class->addMethod('__construct');
        $constructor->addPromotedParameter('baseUrl')->setType('string')->setProtected();
        $constructor->addPromotedParameter('token')->setType('string')->setProtected();

        $constructor->addParameter('httpClient')
            ->setType(ClientInterface::class)
            ->setNullable()
            ->setDefaultValue(null);
        $constructor->addBody('$this->httpClient = $httpClient ?? \Http\Discovery\Psr18ClientDiscovery::find();');

        $constructor->addParameter('requestFactory')
            ->setType(RequestFactoryInterface::class)
            ->setNullable()
            ->setDefaultValue(null);
        $constructor->addBody('$this->requestFactory = $requestFactory ?? \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();');

        $constructor->addParameter('streamFactory')
            ->setType(StreamFactoryInterface::class)
            ->setNullable()
            ->setDefaultValue(null);
        $constructor->addBody('$this->streamFactory = $streamFactory ?? \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();');

        $baseUrlSetter = $class->addMethod('setBaseUrl');
        $baseUrlSetter->setReturnType('static');
        $baseUrlSetter->addParameter('baseUrl')->setType('string');
        $baseUrlSetter->addBody('$this->baseUrl = $baseUrl;');
        $baseUrlSetter->addBody('return $this;');

        $tokenSetter = $class->addMethod('setToken');
        $tokenSetter->setReturnType('static');
        $tokenSetter->addParameter('token')->setType('string');
        $tokenSetter->addBody('$this->token = $token;');
        $tokenSetter->addBody('return $this;');
    }
}

function mapParameterType(mixed $type)
{
    if ($type === 'integer') {
        return 'int';
    }

    if ($type === 'boolean') {
        return 'bool';
    }

    if ($type === 'array') {
        return 'array';
    }

    if ($type === 'object') {
        return stdClass::class;
    }

    return $type;
}

function createHydrationMethod(ClassType $class): Method
{
    $hydrationMethod = $class->addMethod('hydrate')->setReturnType('static');
    $dataParameter = $hydrationMethod->addParameter('data')
        ->setType('array')
        ->setNullable()
        ->setComment('@param array<string, mixed> $data');
    if ($class->getExtends() !== null) {
        $hydrationMethod->addBody('parent::hydrate($data);');
    }
    $hydrationMethod->addBody('if ($data === null) return $this;');
    $hydrationMethod->addBody(implode("\n", array_map(function ($property) {
        if ($property->getType() === 'stdClass') {
            return sprintf('/** @var %s $data[\'%s\'] */
if (isset($data[\'%s\'])) $this->%s = (object) $data[\'%s\'];', $property->getType(), $property->getName(), $property->getName(), $property->getName(), $property->getName());
        }

        return sprintf('/** @var %s $data[\'%s\'] */
if (isset($data[\'%s\'])) $this->%s = $data[\'%s\'];', $property->getType(), $property->getName(), $property->getName(), $property->getName(), $property->getName());
    }, $class->getProperties())));
    $hydrationMethod->addBody('return $this;');

    return $hydrationMethod;
}

function createHydrationMethodForArrayBody(ClassType $class, string $itemType): Method
{
    $hydrationMethod = createHydrationMethod($class);
    $hydrationMethod->setBody(<<<PHP
if (\$data === null) return \$this;
foreach (\$data as \$item) {
    \$this->items[] = (new $itemType())->hydrate(\$item);
}

return \$this;
PHP);

    return $hydrationMethod;
}

foreach ($openApi['components']['schemas'] as $schemaName => $schema) {
    $class = $modelNamespace->addClass($schemaName);

    if (isset($schema['description'])) {
        $class->setComment($schema['description']);
    }

    if (isset($schema['properties'])) {
        foreach ($schema['properties'] as $propertyName => $property) {
            $p = $class->addProperty($propertyName);
            $p->setType(isset($property['type']) ? mapParameterType($property['type']) : null);
            $p->setComment($property['description'] ?? null)
                ->setNullable(!isset($property['required']) || $property['required'] === false);
        }
        $hydrationMethod = createHydrationMethod($class);
    } elseif (isset($schema['type']) && $schema['type'] === 'array' && isset($schema['items']['$ref'])) {
        $itemType = '\\' . $modelNamespaceName . '\\' . str_replace('#/components/schemas/', '', $schema['items']['$ref']);
        $class->addProperty('items')
            ->setType('array')
            ->setComment(sprintf('@var %s[]', $itemType))
        ;
        $hydrationMethod = createHydrationMethodForArrayBody($class, $itemType);
    } elseif (isset($schema['allOf'])) {
        foreach ($schema['allOf'] as $i => $allOf) {
            // class extends another object (allOf)
            if (isset($allOf['$ref'])) {
                $itemType = '\\' . $modelNamespaceName . '\\' . str_replace('#/components/schemas/', '', $allOf['$ref']);
                $class->setExtends($itemType);
            }
        }
    }
}

foreach ($openApi['components']['responses'] as $schemaName => $schema) {
    $class = $modelNamespace->addClass('Default' . $schemaName . 'Response');
    $class->addTrait(ResponseTrait::class);

    if (isset($schema['description'])) {
        $class->addComment($schema['description']);
    }
    if (isset($schema['summary'])) {
        $class->addComment($schema['summary']);
    }

    if (isset($schema['properties'])) {
        foreach ($schema['properties'] as $propertyName => $property) {
            $p = $class->addProperty($propertyName);
            $p->setType(isset($property['type']) ? mapParameterType($property['type']) : null);
            $p->setComment($property['description'] ?? null)
                ->setNullable(!isset($property['required']) || $property['required'] === false);
        }
    } elseif (isset($schema['content']['application/json']['schema']['$ref'])) {
        $itemType = '\\' . $modelNamespaceName . '\\' . str_replace('#/components/schemas/', '', $schema['content']['application/json']['schema']['$ref']);
        $class->setExtends($itemType);
    }

    $hydrationMethod = createHydrationMethod($class);
}

function createRequestBodyModelClassFromSchema(PhpNamespace $modelNamespace, string $operationId, array $schema): ClassType
{
    $class = $modelNamespace->addClass($operationId . 'Request');
    $constructor = $class->addMethod('__construct');

    if (isset($schema['type']) && $schema['type'] === 'array') {
        if (!isset($schema['items']) || !is_array($schema['items'])) {
            return $class;
        }

        $itemsType = isset($schema['items']['type']) ? mapParameterType($schema['items']['type']) : null;
        $cp = $constructor->addPromotedParameter('items')
            ->setType('array')
            ->setComment(sprintf('@var %s[]', $itemsType))
            ->addComment($schema['items']['description'] ?? '')
        ;
    } elseif (isset($schema['type']) && $schema['type'] === 'object') {
        if (!isset($schema['properties']) || !is_array($schema['properties'])) {
            return $class;
        }

        foreach ($schema['properties'] as $propertyName => $property) {
            $required = (isset($property['required']) && $property['required'] !== false)
                || (isset($schema['required']) && in_array($propertyName, $schema['required'], true));

            $cp = $constructor->addPromotedParameter($propertyName)->setType(isset($property['type']) ? mapParameterType($property['type']) : null);
            if (!$required) {
                $cp
                    ->setNullable()
                    ->setDefaultValue(null);
            }

            $cp->setComment($property['description'] ?? null);
        }
    }

    return $class;
}

foreach ($openApi['paths'] as $path => $pathSpec) {
    foreach ($pathSpec as $httpMethod => $methodSpec) {
        echo "$httpMethod - $path (" . $methodSpec['operationId'] . ")\n";

        $class = findClass($endpointNamespace, $methodSpec['tags'][0]);
        if (!$class) {
            continue;
        }

        $method = $class->addMethod(lcfirst($methodSpec['operationId']))
            ->setComment($methodSpec['summary'] ?? null)
            ->addComment($methodSpec['description'] ?? null)
            ->addComment('@throws \Psr\Http\Client\ClientExceptionInterface')
            ->addBody(sprintf('$path = \'%s\';', $path))
            ->addBody(sprintf('$method = \'%s\';', $httpMethod))
            ->addBody('$pathParameters = [];')
            ->addBody('$queryParameters = [];')
            ->addBody('')
        ;

        $pathParameters = [];
        $queryParameters = [];

        if (isset($methodSpec['parameters'])) {
            foreach ($methodSpec['parameters'] as $parameter) {
                $parameterIsNullable = !isset($parameter['required']) || $parameter['required'] === false;
                $p = $method->addParameter($parameter['name'])->setType(mapParameterType($parameter['schema']['type']));
                $p->setComment($parameter['description'])->setNullable($parameterIsNullable);

                if (isset($parameter['schema']['default'])) {
                    $p->setDefaultValue($parameter['schema']['default']);
                } elseif ($parameterIsNullable) {
                    $p->setDefaultValue(null);
                }

                if ($parameter['in'] === 'path') {
                    $pathParameters[] = $parameter['name'];
                    $method->addBody(sprintf('$pathParameters[\'%s\'] = $%s;', $parameter['name'], $parameter['name']));
                } elseif ($parameter['in'] === 'query') {
                    $queryParameters[] = $parameter['name'];
                    $method->addBody(sprintf('$queryParameters[\'%s\'] = $%s;', $parameter['name'], $parameter['name']));
                }
            }
        }

        if (isset($methodSpec['requestBody'])) {
            $requestBody = $methodSpec['requestBody'];
            $requestBodyContent = $requestBody['content'];

            if (isset($requestBodyContent['application/json'])) {
                $requestBodyContentJson = $requestBodyContent['application/json'];

                $requestBodyClass = createRequestBodyModelClassFromSchema(
                    $modelNamespace,
                    ucfirst($methodSpec['operationId']),
                    $requestBodyContentJson['schema'] ?? [],
                );

                $method->addParameter('requestBody')->setType($modelNamespaceName . '\\' . $requestBodyClass->getName());
            }
        }

        $method
            ->addBody('')
            ->addBody('// build URI through path and query parameters')
            ->addBody('$uri = $this->buildUri($path, $pathParameters, $queryParameters);')
            ->addBody('')
            ->addBody('$request = $this->requestFactory->createRequest($method, $uri);')
            ->addBody('$request = $request->withHeader(\'Authorization\', \'Bearer \' . $this->token);');

        if (isset($requestBodyContent['application/json'])) {
            $method->addBody('$request = $request->withBody($this->streamFactory->createStream(json_encode($requestBody) ?? \'\'));');
        }

        $method
            ->addBody('')
            ->addBody('$response = $this->httpClient->sendRequest($request);')
            ->addBody('')
            ->addBody('$map = [];')
        ;

        foreach ($methodSpec['responses'] as $responseCode => $responseSpec) {
            if (isset($responseSpec['$ref'])) {
                $responseClass = '';
                if (str_starts_with($responseSpec['$ref'], '#/components/responses/')) {
                    $responseClass = $modelNamespaceName . '\\' . str_replace('#/components/responses/', 'Default', $responseSpec['$ref']) . 'Response';
                } elseif (str_starts_with($responseSpec['$ref'], '#/components/schemas/')) {
                    $responseClass = $modelNamespaceName . '\\' . str_replace('#/components/schemas/', '', $responseSpec['$ref']);
                } else {
                    $responseClass = $modelNamespaceName . '\\' . $responseSpec['$ref'];
                }

            } else {
                // focus on json
                if (!isset($responseSpec['content']['application/json'])) {
                    continue;
                }
                if (isset($responseSpec['content']['application/json']['schema']['$ref'])) {
                    $responseClass = $modelNamespaceName . '\\' . str_replace('#/components/schemas/', '', $responseSpec['content']['application/json']['schema']['$ref']);
                    $method->addBody(sprintf('$map[%d] = \\%s::class;', $responseCode, $responseClass));
                    if ($method->getReturnType() === null) {
                        $method->setReturnType($responseClass);
                    } else {
                        $returnType = $method->getReturnType();
                        $method->setReturnType($returnType . '|' . $responseClass);
                    }

                    continue;
                }

                $responseClass = $modelNamespaceName . '\\' . $methodSpec['operationId'] . 'Response';
            }
            if ($method->getReturnType() === null) {
                $method->setReturnType($responseClass);
            } else {
                $returnType = $method->getReturnType();
                $method->setReturnType($returnType . '|' . $responseClass);
            }
            $method->addBody(sprintf('$map[%d] = \\%s::class;', $responseCode, $responseClass));
        }

        $method
            ->addBody('')
            ->addBody('return $this->mapResponse($response, $map);');
    }
}

foreach ($modelNamespace->getClasses() as $genClass) {
    $file = new Nette\PhpGenerator\PhpFile;
    $file->addComment('This file is auto-generated.');
    $file->setStrictTypes();

    $class = $file->addClass($endpointNamespaceName . '\\' . $genClass->getName());

    file_put_contents(__DIR__ . '/../src/Client/Model/' . $genClass->getName() . '.php', <<<PHP
<?php

namespace {$genClass->getNamespace()->getName()};

{$printer->printClass($genClass, $genClass->getNamespace())}
PHP);
}

foreach ($endpointNamespace->getClasses() as $genClass) {
    $file = new Nette\PhpGenerator\PhpFile;
    $file->addComment('This file is auto-generated.');
    $file->setStrictTypes(); // adds declare(strict_types=1)

    $class = $file->addClass($endpointNamespaceName . '\\' . $genClass->getName());

    file_put_contents(__DIR__ . '/../src/Client/Endpoint/' . $genClass->getName() . '.php', <<<PHP
<?php

namespace {$genClass->getNamespace()->getName()};

{$printer->printClass($genClass, $genClass->getNamespace())}
PHP);
}

exit(0);
